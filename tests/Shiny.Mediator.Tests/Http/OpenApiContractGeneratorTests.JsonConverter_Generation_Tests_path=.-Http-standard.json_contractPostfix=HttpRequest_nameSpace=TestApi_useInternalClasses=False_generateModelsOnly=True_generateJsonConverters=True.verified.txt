/// <summary>
/// This file is generated by Shiny.Mediator source generation
/// Do not modify this file directly
/// </summary>
#nullable enable

namespace TestApi;

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(global::TestApi.AddressDataJsonConverter))]
public partial class AddressData
{
    [global::System.Text.Json.Serialization.JsonPropertyName("value1")]
    public string? Value1 { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("value2")]
    public string? Value2 { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("city")]
    public string? City { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("stateProvince")]
    public string? StateProvince { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("country")]
    public string? Country { get; set; }

}

public class AddressDataJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::TestApi.AddressData>
{
    public override global::TestApi.AddressData? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return null;

        if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException("Expected StartObject token");

        var obj = new global::TestApi.AddressData();

        while (reader.Read())
        {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
                break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
                throw new global::System.Text.Json.JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "value1":
                    if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
                        obj.Value1 = null;
                    else
                        obj.Value1 = reader.GetString();
                    break;
                case "value2":
                    if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
                        obj.Value2 = null;
                    else
                        obj.Value2 = reader.GetString();
                    break;
                case "city":
                    if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
                        obj.City = null;
                    else
                        obj.City = reader.GetString();
                    break;
                case "stateProvince":
                    if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
                        obj.StateProvince = null;
                    else
                        obj.StateProvince = reader.GetString();
                    break;
                case "country":
                    if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
                        obj.Country = null;
                    else
                        obj.Country = reader.GetString();
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return obj;
    }

    public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::TestApi.AddressData value, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();

        if (value.Value1 != null)
        {
            writer.WritePropertyName("value1");
            writer.WriteStringValue(value.Value1);
        }

        if (value.Value2 != null)
        {
            writer.WritePropertyName("value2");
            writer.WriteStringValue(value.Value2);
        }

        if (value.City != null)
        {
            writer.WritePropertyName("city");
            writer.WriteStringValue(value.City);
        }

        if (value.StateProvince != null)
        {
            writer.WritePropertyName("stateProvince");
            writer.WriteStringValue(value.StateProvince);
        }

        if (value.Country != null)
        {
            writer.WritePropertyName("country");
            writer.WriteStringValue(value.Country);
        }

        writer.WriteEndObject();
    }
}

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(global::TestApi.CameraJsonConverter))]
public partial class Camera
{
    [global::System.Text.Json.Serialization.JsonPropertyName("id")]
    public int Id { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("name")]
    public string? Name { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("propertyId")]
    public int? PropertyId { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("property")]
    public global::TestApi.Property Property { get; set; }

}

public class CameraJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::TestApi.Camera>
{
    public override global::TestApi.Camera? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return null;

        if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException("Expected StartObject token");

        var obj = new global::TestApi.Camera();

        while (reader.Read())
        {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
                break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
                throw new global::System.Text.Json.JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "id":
                    obj.Id = reader.GetInt32();
                    break;
                case "name":
                    if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
                        obj.Name = null;
                    else
                        obj.Name = reader.GetString();
                    break;
                case "propertyId":
                    obj.PropertyId = reader.GetInt32();
                    break;
                case "property":
                    obj.Property = global::System.Text.Json.JsonSerializer.Deserialize<global::TestApi.Property>(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return obj;
    }

    public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::TestApi.Camera value, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();

        writer.WritePropertyName("id");
        writer.WriteNumberValue(value.Id);

        if (value.Name != null)
        {
            writer.WritePropertyName("name");
            writer.WriteStringValue(value.Name);
        }

        if (value.PropertyId != null)
        {
            writer.WritePropertyName("propertyId");
            writer.WriteNumberValue(value.PropertyId);
        }

        writer.WritePropertyName("property");
        global::System.Text.Json.JsonSerializer.Serialize(writer, value.Property, options);

        writer.WriteEndObject();
    }
}

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(global::TestApi.PropertyJsonConverter))]
public partial class Property
{
    [global::System.Text.Json.Serialization.JsonPropertyName("id")]
    public int Id { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("userId")]
    public int UserId { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("name")]
    public string? Name { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("address")]
    public global::TestApi.AddressData Address { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("cameras")]
    public global::System.Collections.Generic.List<global::TestApi.Camera> Cameras { get; set; }

}

public class PropertyJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::TestApi.Property>
{
    public override global::TestApi.Property? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return null;

        if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException("Expected StartObject token");

        var obj = new global::TestApi.Property();

        while (reader.Read())
        {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
                break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
                throw new global::System.Text.Json.JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "id":
                    obj.Id = reader.GetInt32();
                    break;
                case "userId":
                    obj.UserId = reader.GetInt32();
                    break;
                case "name":
                    if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
                        obj.Name = null;
                    else
                        obj.Name = reader.GetString();
                    break;
                case "address":
                    obj.Address = global::System.Text.Json.JsonSerializer.Deserialize<global::TestApi.AddressData>(ref reader, options);
                    break;
                case "cameras":
                    if (reader.TokenType == global::System.Text.Json.JsonTokenType.StartArray)
                    {
                        var list = new global::System.Collections.Generic.List<global::TestApi.Camera>();
                        while (reader.Read() && reader.TokenType != global::System.Text.Json.JsonTokenType.EndArray)
                        {
                            var item = global::System.Text.Json.JsonSerializer.Deserialize(ref reader, typeof(global::TestApi.Camera), options);
                            if (item != null) list.Add((global::TestApi.Camera)item);
                        }
                        obj.Cameras = list;
                    }
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return obj;
    }

    public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::TestApi.Property value, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();

        writer.WritePropertyName("id");
        writer.WriteNumberValue(value.Id);

        writer.WritePropertyName("userId");
        writer.WriteNumberValue(value.UserId);

        if (value.Name != null)
        {
            writer.WritePropertyName("name");
            writer.WriteStringValue(value.Name);
        }

        writer.WritePropertyName("address");
        global::System.Text.Json.JsonSerializer.Serialize(writer, value.Address, options);

        writer.WritePropertyName("cameras");
        writer.WriteStartArray();
        if (value.Cameras != null)
        {
            foreach (var item in value.Cameras)
                global::System.Text.Json.JsonSerializer.Serialize(writer, item, options);
        }
        writer.WriteEndArray();

        writer.WriteEndObject();
    }
}

