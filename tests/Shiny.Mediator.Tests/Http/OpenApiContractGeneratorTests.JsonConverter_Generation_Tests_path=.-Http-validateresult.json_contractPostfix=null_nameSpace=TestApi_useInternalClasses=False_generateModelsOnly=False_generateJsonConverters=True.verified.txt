/// <summary>
/// This file is generated by Shiny.Mediator source generation
/// Do not modify this file directly
/// </summary>
#nullable enable

namespace TestApi;

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(global::TestApi.CreateTeamJsonConverter))]
public partial class CreateTeam
{
    [global::System.Text.Json.Serialization.JsonPropertyName("seasonId")]
    public System.Guid SeasonId { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("team")]
    public global::TestApi.Team Team { get; set; }

}

public class CreateTeamJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::TestApi.CreateTeam>
{
    public override global::TestApi.CreateTeam? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return null;

        if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException("Expected StartObject token");

        var obj = new global::TestApi.CreateTeam();

        while (reader.Read())
        {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
                break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
                throw new global::System.Text.Json.JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "seasonId":
                    obj.SeasonId = reader.GetString() ?? string.Empty;
                    break;
                case "team":
                    obj.Team = global::System.Text.Json.JsonSerializer.Deserialize<global::TestApi.Team>(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return obj;
    }

    public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::TestApi.CreateTeam value, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();

        writer.WritePropertyName("seasonId");
        writer.WriteStringValue(value.SeasonId);

        writer.WritePropertyName("team");
        global::System.Text.Json.JsonSerializer.Serialize(writer, value.Team, options);

        writer.WriteEndObject();
    }
}

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(global::TestApi.TeamJsonConverter))]
public partial class Team
{
    [global::System.Text.Json.Serialization.JsonPropertyName("id")]
    public System.Guid Id { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("cityOrSchool")]
    public string CityOrSchool { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("name")]
    public string Name { get; set; }

}

public class TeamJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::TestApi.Team>
{
    public override global::TestApi.Team? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return null;

        if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException("Expected StartObject token");

        var obj = new global::TestApi.Team();

        while (reader.Read())
        {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
                break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
                throw new global::System.Text.Json.JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "id":
                    obj.Id = reader.GetString() ?? string.Empty;
                    break;
                case "cityOrSchool":
                    obj.CityOrSchool = reader.GetString() ?? string.Empty;
                    break;
                case "name":
                    obj.Name = reader.GetString() ?? string.Empty;
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return obj;
    }

    public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::TestApi.Team value, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();

        writer.WritePropertyName("id");
        writer.WriteStringValue(value.Id);

        writer.WritePropertyName("cityOrSchool");
        writer.WriteStringValue(value.CityOrSchool);

        writer.WritePropertyName("name");
        writer.WriteStringValue(value.Name);

        writer.WriteEndObject();
    }
}

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(global::TestApi.UpdateTeamJsonConverter))]
public partial class UpdateTeam
{
    [global::System.Text.Json.Serialization.JsonPropertyName("team")]
    public global::TestApi.Team Team { get; set; }

}

public class UpdateTeamJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::TestApi.UpdateTeam>
{
    public override global::TestApi.UpdateTeam? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return null;

        if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException("Expected StartObject token");

        var obj = new global::TestApi.UpdateTeam();

        while (reader.Read())
        {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
                break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
                throw new global::System.Text.Json.JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "team":
                    obj.Team = global::System.Text.Json.JsonSerializer.Deserialize<global::TestApi.Team>(ref reader, options);
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return obj;
    }

    public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::TestApi.UpdateTeam value, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();

        writer.WritePropertyName("team");
        global::System.Text.Json.JsonSerializer.Serialize(writer, value.Team, options);

        writer.WriteEndObject();
    }
}

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(global::TestApi.ValidateResultErrorsJsonConverter))]
public partial class ValidateResultErrors
{
}

public class ValidateResultErrorsJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::TestApi.ValidateResultErrors>
{
    public override global::TestApi.ValidateResultErrors? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return null;

        if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException("Expected StartObject token");

        var obj = new global::TestApi.ValidateResultErrors();

        while (reader.Read())
        {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
                break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
                throw new global::System.Text.Json.JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                default:
                    reader.Skip();
                    break;
            }
        }

        return obj;
    }

    public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::TestApi.ValidateResultErrors value, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();

        writer.WriteEndObject();
    }
}

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(global::TestApi.ValidateResultJsonConverter))]
public partial class ValidateResult
{
    [global::System.Text.Json.Serialization.JsonPropertyName("errors")]
    public ValidateResultErrors Errors { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("isValid")]
    public bool IsValid { get; set; }

}

public class ValidateResultJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::TestApi.ValidateResult>
{
    public override global::TestApi.ValidateResult? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return null;

        if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException("Expected StartObject token");

        var obj = new global::TestApi.ValidateResult();

        while (reader.Read())
        {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
                break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
                throw new global::System.Text.Json.JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "errors":
                    obj.Errors = global::System.Text.Json.JsonSerializer.Deserialize<global::System.Collections.Generic.Dictionary<string, global::System.Collections.Generic.List<string>>>(ref reader, options);
                    break;
                case "isValid":
                    obj.IsValid = reader.GetBoolean();
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return obj;
    }

    public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::TestApi.ValidateResult value, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();

        writer.WritePropertyName("errors");
        global::System.Text.Json.JsonSerializer.Serialize(writer, value.Errors, options);

        writer.WritePropertyName("isValid");
        writer.WriteBooleanValue(value.IsValid);

        writer.WriteEndObject();
    }
}

[global::Shiny.Mediator.Http.HttpAttribute(global::Shiny.Mediator.Http.HttpVerb.Put, "/teams")]
public partial class UpdateTeam : global::Shiny.Mediator.Http.IHttpRequest<global::TestApi.ValidateResult>
{
    [global::Shiny.Mediator.Http.HttpParameter(global::Shiny.Mediator.Http.HttpParameterType.Body)]
    public global::TestApi.UpdateTeam Body { get; set; }
}

[global::Shiny.Mediator.Http.HttpAttribute(global::Shiny.Mediator.Http.HttpVerb.Post, "/teams")]
public partial class CreateTeam : global::Shiny.Mediator.Http.IHttpRequest<global::TestApi.ValidateResult>
{
    [global::Shiny.Mediator.Http.HttpParameter(global::Shiny.Mediator.Http.HttpParameterType.Body)]
    public global::TestApi.CreateTeam Body { get; set; }
}

