/// <summary>
/// This file is generated by Shiny.Mediator source generation
/// Do not modify this file directly
/// </summary>
#nullable enable

namespace TestApi;

[global::System.Text.Json.Serialization.JsonConverterAttribute(typeof(global::TestApi.AdJsonConverter))]
public partial class Ad
{
    [global::System.Text.Json.Serialization.JsonPropertyName("id")]
    public System.Guid Id { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("name")]
    public string Name { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("visualType")]
    public AdVisualType VisualType { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("visualAssetUri")]
    public string? VisualAssetUri { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("audioUri")]
    public string? AudioUri { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("duration")]
    public System.TimeSpan Duration { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("isForIdle")]
    public bool IsForIdle { get; set; }

    [global::System.Text.Json.Serialization.JsonPropertyName("leagueId")]
    public System.Guid LeagueId { get; set; }

}

public class AdJsonConverter : global::System.Text.Json.Serialization.JsonConverter<global::TestApi.Ad>
{
    public override global::TestApi.Ad? Read(ref global::System.Text.Json.Utf8JsonReader reader, global::System.Type typeToConvert, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
            return null;

        if (reader.TokenType != global::System.Text.Json.JsonTokenType.StartObject)
            throw new global::System.Text.Json.JsonException("Expected StartObject token");

        var obj = new global::TestApi.Ad();

        while (reader.Read())
        {
            if (reader.TokenType == global::System.Text.Json.JsonTokenType.EndObject)
                break;

            if (reader.TokenType != global::System.Text.Json.JsonTokenType.PropertyName)
                throw new global::System.Text.Json.JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "id":
                    obj.Id = reader.GetString() ?? string.Empty;
                    break;
                case "name":
                    obj.Name = reader.GetString() ?? string.Empty;
                    break;
                case "visualType":
                    reader.Skip();
                    break;
                case "visualAssetUri":
                    if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
                        obj.VisualAssetUri = null;
                    else
                        obj.VisualAssetUri = reader.GetString();
                    break;
                case "audioUri":
                    if (reader.TokenType == global::System.Text.Json.JsonTokenType.Null)
                        obj.AudioUri = null;
                    else
                        obj.AudioUri = reader.GetString();
                    break;
                case "duration":
                    obj.Duration = reader.GetString() ?? string.Empty;
                    break;
                case "isForIdle":
                    obj.IsForIdle = reader.GetBoolean();
                    break;
                case "leagueId":
                    obj.LeagueId = reader.GetString() ?? string.Empty;
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return obj;
    }

    public override void Write(global::System.Text.Json.Utf8JsonWriter writer, global::TestApi.Ad value, global::System.Text.Json.JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();

        writer.WritePropertyName("id");
        writer.WriteStringValue(value.Id);

        writer.WritePropertyName("name");
        writer.WriteStringValue(value.Name);

        if (value.VisualAssetUri != null)
        {
            writer.WritePropertyName("visualAssetUri");
            writer.WriteStringValue(value.VisualAssetUri);
        }

        if (value.AudioUri != null)
        {
            writer.WritePropertyName("audioUri");
            writer.WriteStringValue(value.AudioUri);
        }

        writer.WritePropertyName("duration");
        writer.WriteStringValue(value.Duration);

        writer.WritePropertyName("isForIdle");
        writer.WriteBooleanValue(value.IsForIdle);

        writer.WritePropertyName("leagueId");
        writer.WriteStringValue(value.LeagueId);

        writer.WriteEndObject();
    }
}

public enum AdVisualType
{
    Lottie,
    Image,
    Video,
}

[global::Shiny.Mediator.Http.HttpAttribute(global::Shiny.Mediator.Http.HttpVerb.Get, "/ads")]
public partial class GetAds : global::Shiny.Mediator.Http.IHttpRequest<global::System.Collections.Generic.List<global::TestApi.Ad>>
{
    [global::Shiny.Mediator.Http.HttpParameterAttribute(global::Shiny.Mediator.Http.HttpParameterType.Query, "ComponentId")]
    public System.Guid ComponentId { get; set; }

}

