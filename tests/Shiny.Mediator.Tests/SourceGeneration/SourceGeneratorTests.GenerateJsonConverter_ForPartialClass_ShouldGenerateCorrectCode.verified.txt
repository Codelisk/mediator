{
  Generator: {},
  GeneratedSources: [
    {
      HintName: SourceGenerateJsonConverterAttribute.g.cs,
      Source:
// <auto-generated/>
using System;

[AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, Inherited = false, AllowMultiple = false)]
internal sealed class SourceGenerateJsonConverterAttribute : Attribute;
    },
    {
      HintName: TestModelJsonConverter.g.cs,
      Source:
// <auto-generated/>
using System;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace <global namespace>;

public sealed class TestModelJsonConverter : JsonConverter<TestModel>
{
    public override void Write(Utf8JsonWriter writer, TestModel value, JsonSerializerOptions options)
    {
        if (value == null)
        {
            writer.WriteNullValue();
            return;
        }

        writer.WriteStartObject();
        writer.WritePropertyName("Name");
        if (value.Name == null)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Name);
        writer.WritePropertyName("Age");
        writer.WriteNumberValue(value.Age);
        writer.WritePropertyName("Email");
        if (value.Email == null)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.Email);
        writer.WritePropertyName("BirthDate");
        if (value.BirthDate == null)
            writer.WriteNullValue();
        else
            writer.WriteStringValue(value.BirthDate.Value.ToString("O"));
        writer.WriteEndObject();
    }

    public override TestModel? Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        if (reader.TokenType == JsonTokenType.Null)
            return null;

        if (reader.TokenType != JsonTokenType.StartObject)
            throw new JsonException("Expected StartObject token");

        var result = new TestModel();

        while (reader.Read())
        {
            if (reader.TokenType == JsonTokenType.EndObject)
                break;

            if (reader.TokenType != JsonTokenType.PropertyName)
                throw new JsonException("Expected PropertyName token");

            var propertyName = reader.GetString();
            reader.Read();

            switch (propertyName)
            {
                case "Name":
                    if (reader.TokenType != JsonTokenType.Null)
                        result.Name = reader.GetString();
                    break;
                case "Age":
                    if (reader.TokenType != JsonTokenType.Null)
                        result.Age = reader.GetInt32();
                    break;
                case "Email":
                    if (reader.TokenType != JsonTokenType.Null)
                        result.Email = reader.GetString();
                    break;
                case "BirthDate":
                    if (reader.TokenType != JsonTokenType.Null)
                        result.BirthDate = (System.DateTime?)reader.GetDateTime();
                    break;
                default:
                    reader.Skip();
                    break;
            }
        }

        return result;
    }
}

    },
    {
      HintName: TestModel.JsonConverterAttribute.g.cs,
      Source:
// <auto-generated>
// This code was generated by Shiny.Json.SourceGenerator
// </auto-generated>
using System.Text.Json.Serialization;

namespace <global namespace>;

[global::System.Text.Json.Serialization.JsonConverter(typeof(TestModelJsonConverter))]
partial class TestModel
{
}

    }
  ],
  Diagnostics: null
}