using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.Text;
using SourceGeneratorsKit;

namespace Shiny.Mediator.SourceGenerators;


[Generator]
public class MediatorSourceGenerator : ISourceGenerator
{
    readonly SyntaxReceiver syntaxReceiver = new RegisterHandlerAttributeSyntaxReceiver();
    // SyntaxReceiver syntaxReceiver = new ClassesWithInterfacesReceiver("IEnumerable");
    
    public void Initialize(GeneratorInitializationContext context)
    {
        context.RegisterForPostInitialization(x => x.AddSource(
            "MediatorAttributes.g.cs", 
            SourceText.From(
                """
                // <auto-generated>
                // Code generated by Shiny Mediator Source Generator.
                // Changes may cause incorrect behavior and will be lost if the code is
                // regenerated.
                // </auto-generated>
                #nullable disable
                
                [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple = false)]
                internal sealed class RegisterHandlerAttribute: System.Attribute
                {
                    public RegisterHandlerAttribute(bool IsSingleton = true) {}
                }
                
                internal sealed class RegisterMiddlewareAttribute: System.Attribute
                {
                    public RegisterMiddlewareAttribute(bool IsSingleton = true) {}
                }
                """,
                Encoding.UTF8
            )
        ));
        context.RegisterForSyntaxNotifications(() => syntaxReceiver);
    }

    
    public void Execute(GeneratorExecutionContext context)
    {
        if (!(context.SyntaxContextReceiver is SyntaxReceiver))
            return;

        // TODO: detect double registration of request handlers
        // TODO: I need the namespace to be the global namespace
        // TODO: this will be registered with multiple AddDiscoveredMediatorHandlers in the main app
        
        var sb = new StringBuilder();
        sb
            .AppendLine("namespace Shiny.Mediator;")
            .AppendLine()
            .AppendLine("public static class __ShinyMediatorSourceGenExtensions {")
            .AppendLine(
                "\tpublic static global::Microsoft.Extensions.DependencyInjection.IServiceCollection AddDiscoveredMediatorHandlers(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services) {");
            
        foreach (var classSymbol in this.syntaxReceiver.Classes)
            sb.AppendLine($"\t\tservices.AddSingletonAsImplementedInterfaces<{classSymbol.ToDisplayString()}>();");

        sb
            .AppendLine("\treturn services;")
            .AppendLine("\t}")
            .AppendLine("}");

        context.AddSource("__MediatorHandlersRegistration.g.cs", SourceText.From(sb.ToString()));
    }
}