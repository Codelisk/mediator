using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.OpenApi.Any;
using Microsoft.OpenApi.Models;
using Microsoft.OpenApi.Readers;

namespace Shiny.Mediator.SourceGenerators.Http;


public class OpenApiContractGenerator(MediatorHttpItemConfig itemConfig, Action<string> output)
{
    readonly StringBuilder typeBuilder = new();
    readonly StringBuilder contractBuilder = new();
    
    public string Generate(Stream stream)
    {
        this.typeBuilder.Clear();
        this.contractBuilder.Clear();
        
        using var streamReader = new StreamReader(stream);
        var reader = new OpenApiStreamReader();
        var document = reader.Read(streamReader.BaseStream, out var diagnostic);
        if (document == null)
            throw new InvalidOperationException("OpenApi Document is null");
        
        if (diagnostic.Errors != null && diagnostic.Errors.Count > 0)
        {
            var e = diagnostic.Errors.First();
            throw new InvalidOperationException($"OpenApi Error: {e.Message} - {e.Pointer}");
        }
        
        var sb = new StringBuilder();
        this.typeBuilder.AppendLine("/// <summary>");
        this.typeBuilder.AppendLine("/// This file is generated by Shiny.Mediator source generation");
        this.typeBuilder.AppendLine("/// Do not modify this file directly");
        this.typeBuilder.AppendLine("/// </summary>");
        this.typeBuilder.AppendLine($"namespace {itemConfig.Namespace};");
        this.typeBuilder.AppendLine();
        
        GenerateComponents(document);
        GenerateContracts(document);

        var result = this.typeBuilder.ToString() + this.contractBuilder.ToString();
        return result;
    }


    void GenerateComponents(OpenApiDocument document)
    {
        output("Generating Components for " + itemConfig.Namespace);
        foreach (var schema in document.Components.Schemas)
        {
            this.GenerateComplexType(schema);
        }
    }


    void GenerateContracts(OpenApiDocument document)
    {
        foreach (var path in document.Paths)
        {
            output("PATH: " + path.Key);
            
            foreach (var op in path.Value.Operations)
            {
                if (String.IsNullOrWhiteSpace(op.Value.OperationId))
                {
                    output("NO OPERATION ID on " + op.Key);
                    continue;
                }
                output($"OPERATION: {op.Key} - ID: {op.Value.OperationId}");
                var responseType = this.GetResponseType(op.Value);
                output($"RESPONSE: {responseType}");
                
                var contractName = $"{itemConfig.ContractPrefix}{op.Value.OperationId.Pascalize()}{itemConfig.ContractPostfix}";
                var httpMethod = op.Key.ToString();
                
                this.contractBuilder.AppendLine($"[global::Shiny.Mediator.Http.HttpAttribute(global::Shiny.Mediator.Http.HttpVerb.{httpMethod}, \"{path.Key}\")]");
                this.contractBuilder.AppendLine($"public partial class {contractName} : global::Shiny.Mediator.Http.IHttpRequest<{responseType}>");
                this.contractBuilder.AppendLine("{");
                
                foreach (var parameter in op.Value.Parameters)
                {
                    var argType = parameter.In == ParameterLocation.Path ? "Path" : "Query";
                    var typeName = this.GetSchemaType(parameter.Schema);
                    var propertyName = parameter.Name.Pascalize();
                    this.contractBuilder.AppendLine($"    [global::Shiny.Mediator.Http.HttpParameter(global::Shiny.Mediator.Http.HttpParameterType.{argType}, \"{parameter.Name}\")]");
                    this.contractBuilder.AppendLine($"    public {typeName} {propertyName} {{ get; set; }}");
                    this.contractBuilder.AppendLine();
                    output($"PROPERTY: {propertyName} ({typeName} - {argType})");
                }

                if (op.Value.RequestBody != null)
                {
                    var body = op.Value.RequestBody;
                    var bodyResponseType = this.GetApplicationJsonResponse(body.Content);
                    if (bodyResponseType != null)
                    {
                        if (!body.Required)
                            bodyResponseType += "?";
                        
                        this.contractBuilder.AppendLine($"    [global::Shiny.Mediator.Http.HttpParameter(global::Shiny.Mediator.Http.HttpParameterType.Body)]");
                        this.contractBuilder.AppendLine($"    public {bodyResponseType} Body {{ get; set; }}");
                        output("BODY: " + bodyResponseType);
                    }
                }
                this.contractBuilder.AppendLine("}");
                this.contractBuilder.AppendLine();
            }
        }
    }
    

    string GetResponseType(OpenApiOperation op)
    {
        var responseType = "global::Shiny.Mediator.Unit";
        if (op.Responses.TryGetValue("200", out var response200))
        {
            var appJsonType = this.GetApplicationJsonResponse(response200.Content);
            if (appJsonType != null)
                responseType = appJsonType;
        }

        return responseType;
    }
    

    string? GetApplicationJsonResponse(IDictionary<string, OpenApiMediaType> response)
    {
        string? responseType = null;
        if (response.TryGetValue("application/json", out var responseContent))
            responseType = this.GetSchemaType(responseContent.Schema);

        return responseType;
    }


    string? GetSchemaType(OpenApiSchema schema)
    {
        string type = null!;
        if (schema.Type != null)
        {
            switch (schema.Type)
            {
                case "string":
                    if (schema.Enum.Count == 0)
                    {
                        type = GetStringType(schema);
                    }
                    else
                    {
                        if (schema.Reference == null)
                            throw new InvalidOperationException("Enum reference is null");
                            
                        type = $"global::{itemConfig.Namespace}.{schema.Reference.Id}";
                    }
                    break;

                case "integer":
                case "number":
                    type = GetNumberType(schema.Format);
                    break;

                case "boolean":
                    type = "bool";
                    break;

                case "array":
                    var listType = this.GetSchemaType(schema.Items);
                    return $"global::System.Collections.Generic.List<{listType}>";

                case "file":
                    return "global::System.IO.Stream";
                
                case "object":
                    if (schema.AdditionalProperties == null)
                    {
                        type = $"global::{itemConfig.Namespace}.{schema.Reference.Id}";    
                    }
                    else
                    {
                        var dictionaryValueType = this.GetSchemaType(schema.AdditionalProperties);
                        type = $"global::System.Collections.Generic.Dictionary<string, {dictionaryValueType}>";
                    }
                    break;

                default:
                    throw new InvalidOperationException("Invalid type - " + schema.Type);
            }
        }
        // TODO: we're not ready for more than 1 right now
        else if ((schema.AllOf?.Count ?? 0) == 1)
        {
            // if discriminator is present, 2 will come through which means the following will error
            // we want to return null instead
            type = this.GetSchemaType(schema.AllOf!.Single()!)!;
        }
        else
        {
            return null;
        }

        if (schema.Nullable)
            type += "?";
        
        return type;
    }
    
    static string GetStringType(OpenApiSchema schema) => schema.Type switch
    {
        "date-time" => "System.DateTimeOffset",
        "uuid" => "System.Guid",
        "date" => "System.DateOnly",
        "time" => "System.TimeOnly",
        // "binary" => "byte[]",
        // "file" => "",
        _ => "string"
    };

    
    static string GetNumberType(string format) => format switch
    {
        "int32" => "int",
        "int64" => "long",
        "float" => "float",
        "double" => "double",
        null => "int",
        _ => throw new InvalidOperationException("Invalid Number Format - " + format)
    };
    
    
    void GenerateComplexType(KeyValuePair<string, OpenApiSchema> schema)
    {
        output("COMPONENT: " + schema.Key);
        var className = schema.Key.Pascalize();

        if (schema.Value.Enum.Count > 0)
        {
            var add = this.GenerateEnum(schema.Value, className);
            this.typeBuilder.AppendLine(add);
        }
        else
        {
            var add = this.GenerateObject(schema.Value, className);
            this.typeBuilder.AppendLine(add);
        }
    }


    string GenerateEnum(OpenApiSchema schema, string enumName)
    {
        // https://learn.microsoft.com/en-us/dotnet/standard/serialization/system-text-json/customize-properties?pivots=dotnet-8-0
        //[JsonConverter(typeof(JsonStringEnumConverter<TYPE>))]        
        output("ENUM COMPONENT GENERATING - " + enumName);

        var sb = new StringBuilder();
        sb.AppendLine($"public enum {enumName}");
        sb.AppendLine("{");
        
        foreach (var ev in schema.Enum.OfType<OpenApiString>())
        {
            // TODO: pascal case the value
            output("ENUM VALUE: " + ev.Value);
            sb.AppendLine($"    {ev.Value},");
        }
        sb.AppendLine("}");
        output("DONE ENUM COMPONENT GENERATING - " + enumName);
        
        return sb.ToString();
    }
    

    string GenerateObject(OpenApiSchema schema, string className)
    {
        output("===GENERATING CLASS COMPONENT: " + className);
        var sb = new StringBuilder();
        sb.Append("public partial class " + className);

        // TODO: this will be 2 when discriminators are present
        //if (schema.Value.AllOf.Count > 1)
        //{
        //    Debugger.Launch();
        //}
        
        if (schema.AllOf.Count == 1)
        {
            // add inheritance
            var baseType = this.GetSchemaType(schema.AllOf.Single());
            sb.AppendLine($" : {baseType}");

            output($"INHERITED: {className} ({baseType})");
        }
        sb.AppendLine();
        sb.AppendLine("{");
        
        foreach (var prop in schema.Properties)
        {
            var propertyName = prop.Key.Pascalize();
            string? typeName = null;
            
            if (prop.Value.Type == "object" && prop.Value.Properties != null && prop.Value.Reference == null)
            {
                typeName = className + propertyName.Pascalize();
                var add = this.GenerateObject(prop.Value, typeName);
                this.typeBuilder.AppendLine(add);
            }
            else if (prop.Value.Type == "string" && prop.Value.Enum.Count > 0 && prop.Value.Reference == null)
            {
                typeName = className + propertyName.Pascalize();
                var add = this.GenerateEnum(prop.Value, typeName);
                this.typeBuilder.AppendLine(add);
            }
            else
            {
                typeName = this.GetSchemaType(prop.Value);
            }

            // TODO: null when OneOf setup
            if (typeName != null)
            {
                // throw new InvalidOperationException("TypeName is null");
                sb.AppendLine($"    [System.Text.Json.Serialization.JsonPropertyName(\"{prop.Key}\")]");
                sb.AppendLine("    public " + typeName + " " + propertyName + " { get; set; }");
                sb.AppendLine();
                output($"PROPERTY: {propertyName} ({typeName})");
            }
        }

        sb.AppendLine("}");
        
        output("===DONE GENERATING CLASS COMPONENT: " + className);
        return sb.ToString();
    }
}


// TODO: properties within properties
/*
properties:
   STANDBY:
     type: object
     properties:
       waitTime:
         type: number
   SINGLE_RIDER:
     type: object
     properties:
       waitTime:
         type: number
         nullable: true
     required:
       - waitTime
   RETURN_TIME:
     type: object
     properties:
       state:
         $ref: '#/components/schemas/ReturnTimeState'
       returnStart:
         type: string
         format: date-time
         nullable: true
       returnEnd:
         type: string
         format: date-time
         nullable: true
     required:
       - state
       - returnStart
       - returnEnd
 */
