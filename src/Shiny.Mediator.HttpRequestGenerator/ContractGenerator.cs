using System.Text;
using Humanizer;
using Microsoft.OpenApi.Any;
using Microsoft.OpenApi.Models;
using Microsoft.OpenApi.Readers;

namespace Shiny.Mediator.HttpRequestGenerator;

// TODO: /api/v1/Feature - no operationId = can I get this from the route?
// TODO: RequestBody - op.Value.RequestBody
// TODO: discriminators on type (camera vs feeder
/*
 inherits baseresponse?
   "AdditionalPurchaseManualResponse": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseResponse"
          },
 */
public class ContractGenerator
{
    public void Test(Stream stream, string writePath, string nameSpace, Action<string> output)
    {
        using var streamReader = new StreamReader(stream);
        var reader = new OpenApiStreamReader();
        var document = reader.Read(streamReader.BaseStream, out var diagnostic);
        if (diagnostic.Errors != null && diagnostic.Errors.Count > 0)
        {
            foreach (var e in diagnostic.Errors)
                Console.WriteLine("Error reading OpenAPI document");
            return;
        }

        var sb = new StringBuilder();
        sb.AppendLine("/// <summary>");
        sb.AppendLine("/// This file is generated by Shiny.Mediator.HttpRequestGenerator");
        sb.AppendLine("/// Do not modify this file directly");
        sb.AppendLine("/// </summary>");
        sb.AppendLine($"namespace {nameSpace};");
        sb.AppendLine();
        
        output("Generating Components for " + nameSpace);
        foreach (var schema in document.Components.Schemas)
        {
            var type = this.GenerateComplexType(schema, output);
            sb.Append(type);
            sb.AppendLine();
        }
        
        foreach (var path in document.Paths)
        {
            output("PATH: " + path.Key);
            
            foreach (var op in path.Value.Operations)
            {
                if (String.IsNullOrWhiteSpace(op.Value.OperationId))
                {
                    output("NO OPERATION ID on " + op.Key);
                    continue;
                }
                output($"OPERATION: {op.Key} - ID: {op.Value.OperationId}");
                var responseType = GetResponseType(op.Value);
                output($"RESPONSE: {responseType}");
                
                var contractName = op.Value.OperationId.Pascalize();
                var httpMethod = op.Key.ToString().Pascalize();
                
                sb.AppendLine($"[global::Shiny.Mediator.Http.HttpAttribute(global::System.Net.Http.HttpMethod.{httpMethod}, \"{path.Key}\")]");
                sb.AppendLine($"public partial class {contractName} : global::Shiny.Mediator.Http.IHttpRequest<{responseType}>");
                sb.AppendLine("{");
                
                foreach (var parameter in op.Value.Parameters)
                {
                    var argType = parameter.In == ParameterLocation.Path ? "Path" : "Query";
                    var typeName = GetSchemaType(parameter.Schema);
                    var propertyName = parameter.Name.Pascalize();
                    sb.AppendLine($"    [global::Shiny.Mediator.Http.HttpParameter(global::Shiny.Mediator.Http.HttpParameterType.{argType})]");
                    sb.AppendLine($"    public {typeName} {propertyName} {{ get; set; }}");
                    sb.AppendLine();
                    output($"PROPERTY: {propertyName} ({typeName} - {argType})");
                }
                
                sb.AppendLine("}");
                sb.AppendLine();
            }
        }

        if (!Directory.Exists(writePath))
            Directory.CreateDirectory(writePath);
        
        var filePath = Path.Combine(writePath, $"{nameSpace}.generated.cs");
        File.WriteAllText(filePath, sb.ToString());
    }


    static string GetResponseType(OpenApiOperation op)
    {
        var responseType = "Shiny.Mediator.Unit";
        if (op.Responses.TryGetValue("200", out var response200))
        {
            if (response200.Content.TryGetValue("application/json", out var responseContent))
            {
                if (responseContent.Schema.Reference != null)
                    responseType = responseContent.Schema.Reference.Id;
            }
        }

        return responseType;
    }

    static string GetSchemaType(OpenApiSchema schema)
    {
        string type = null!;
        if (schema.Type != null)
        {
            switch (schema.Type)
            {
                case "string":
                    if (schema.Enum.Count > 0)
                        type = schema.Reference.Id; // TODO: this is being hit but the enum property isn't being generated
                    else
                        type = GetStringType(schema);
                    break;

                case "integer":
                case "number":
                    type = GetNumberType(schema.Format);
                    break;

                case "boolean":
                    type = "bool";
                    break;

                case "array":
                    var listType = GetSchemaType(schema.Items);
                    return $"System.Collections.Generic.List<{listType}>";

                case "object":
                    if (schema.AdditionalProperties == null)
                    {
                        type = schema.Reference.Id;    
                    }
                    else
                    {
                        var dictionaryValueType = GetSchemaType(schema.AdditionalProperties);
                        type = $"System.Collections.Generic.Dictionary<string, {dictionaryValueType}>";
                    }
                    break;

                default:
                    throw new InvalidOperationException("Invalid type " + schema.Type);
            }
        }
        else if (schema.AllOf != null)
        {
            type = GetSchemaType(schema.AllOf.Single()!);
        }
        else
        {
            throw new InvalidOperationException("Invalid Schema Type");
        }

        if (schema.Nullable)
            type += "?";
        
        return type;
    }
    
    static string GetStringType(OpenApiSchema schema) => schema.Type switch
    {
        "date-time" => "System.DateTimeOffset",
        "uuid" => "System.Guid",
        _ => "string"
    };

    static string GetNumberType(string format) => format switch
    {
        "int32" => "int",
        "int64" => "long",
        "float" => "float",
        "double" => "double",
        _ => throw new InvalidOperationException("Invalid Number Format - " + format)
    };

    string GenerateComplexType(KeyValuePair<string, OpenApiSchema> schema, Action<string> output)
    {
        output("COMPONENT: " + schema.Key);
        var sb = new StringBuilder();
        var className = schema.Key.Pascalize();

        if (schema.Value.Enum.Count > 0)
        {
            output("ENUM COMPONENT GENERATING");
            sb.AppendLine("public enum " + className);
            sb.AppendLine("{");
            foreach (var ev in schema.Value.Enum.OfType<OpenApiString>())
            {
                sb.AppendLine($"    {ev.Value},");
            }
            sb.AppendLine("}");
        }
        else
        {
            output("GENERATING CLASS COMPONENT");
            sb.AppendLine("public class " + className);
            sb.AppendLine("{");
            
            foreach (var prop in schema.Value.Properties)
            {
                var propertyName = prop.Key.Pascalize();
                if (prop.Value != null)
                {
                    var typeName = GetSchemaType(prop.Value);
                    sb.AppendLine($"    [System.Text.Json.Serialization.JsonPropertyName(\"{prop.Key}\")]");
                    sb.AppendLine( "    public " + typeName + " " + propertyName + " { get; set; }");
                    sb.AppendLine();
                    
                    output($"PROPERTY: {propertyName} ({typeName})");
                }
            }
            sb.AppendLine("}");
        }

        return sb.ToString();
    }
}
